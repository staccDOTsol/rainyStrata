import{DataV2 as t}from"@metaplex-foundation/mpl-token-metadata";import{NATIVE_MINT as e}from"@solana/spl-token";import{PublicKey as i,Keypair as a}from"@solana/web3.js";import{randomizeFileName as n,uploadFiles as s,PermissionType as r}from"@strata-foundation/chat";import{TimeCurveConfig as o,TimeDecayExponentialCurveConfig as u}from"@strata-foundation/spl-token-bonding";import{toBN as c,sendMultipleInstructions as l}from"@strata-foundation/spl-utils";const d={baseMint:e,buyBaseRoyaltyPercentage:0,buyTargetRoyaltyPercentage:5,sellBaseRoyaltyPercentage:0,sellTargetRoyaltyPercentage:0,targetMintDecimals:9},m=t=>{const e=2*t;return(new o).addCurve(0,new u({c:e,k0:0,k1:0,d:1,interval:0})).addCurve(1800,new u({c:e,k0:0,k1:1,d:.5,interval:5400}))},p=t=>{if(t)return{native:r.Native,token:r.Token,nft:r.NFT}[t]},g=({identifier:e,uri:i})=>new t({name:e.substring(0,32),symbol:e.substring(0,10),uri:i,sellerFeeBasisPoints:0,creators:null,collection:null,uses:null}),y=t=>new File([new Blob([JSON.stringify(t)],{type:"application/json"})],"file.json"),f=async({sdks:t,data:{wizardData:e},delegateWallet:r,setState:o})=>{const{chatSdk:u,tokenBondingSdk:f}=t;let w=null;const{name:v,identifier:b,imageUrl:k}=e,{readForm:h,postForm:P,postIsSameAsRead:K}=e;if(u&&f){let t,e,S,M,B,D;o({status:"submitting",error:void 0});let F=[],T=[],I=[],R=[];if(t=p(h.type),e=h.amount,S="native"===h.type?new i(h.mint):"nft"===h.type?new i(h.collectionKey):void 0,M=p(P.type),B=P.amount,D="native"===P.type?new i(P.mint):"nft"===P.type?new i(P.collectionKey):void 0,!S||!D){if(!S){e=c(h.amount,d.targetMintDecimals);const t=a.generate(),i=y({name:v,symbol:b,description:K?`Permission token for ${b} chat`:`Read permission token for ${b} chat`,image:k,mint:t.publicKey});n(i);try{o({subStatus:"Uploading read token metadata to SHDW drive..."});const e=await s(u.provider,[i],r);if(!e||!e.length)throw new Error("Failed to upload token metadata");const a=g({identifier:`${K?"":"READ"}${b}`,uri:e[0]}),n=await f.initializeCurveInstructions({config:m(h.startingPrice)}),c={...d,targetMint:t.publicKey,curve:n.output.curve},l=await u.createMetadataForBondingInstructions({targetMintKeypair:t,metadataUpdateAuthority:u.wallet.publicKey,metadata:a,decimals:c.targetMintDecimals}),p=await f.createTokenBondingInstructions(c);F.push([...n.instructions,...l.instructions],p.instructions),T.push([...n.signers,...l.signers],p.signers),S=t.publicKey}catch(t){w=t,o({error:t})}}if(!D&&!w)if(K)D=S,B=e,M=t;else{B=c(h.amount,d.targetMintDecimals);const t=a.generate(),e=y({name:v,symbol:b,description:`Post permission token for ${b} chat`,image:k,mint:t.publicKey});n(e);try{o({subStatus:"Uploading post token metadata to SHDW drive..."});const i=await s(u.provider,[e],r);if(!i||!i.length)throw new Error("Failed to upload token metadata");const a=g({identifier:`POST${b}`,uri:i[0]}),n=await f.initializeCurveInstructions({config:m(h.startingPrice)}),c={...d,targetMint:t.publicKey,curve:n.output.curve},l=await u.createMetadataForBondingInstructions({targetMintKeypair:t,metadataUpdateAuthority:u.wallet.publicKey,metadata:a,decimals:c.targetMintDecimals}),p=await f.createTokenBondingInstructions(c);I.push([...n.instructions,...l.instructions],p.instructions),R.push([...n.signers,...l.signers],p.signers),D=t.publicKey}catch(t){w=t,o({error:t})}}}if(w)o({status:void 0,subStatus:void 0});else{const i=await u.initializeChatInstructions({name:v,identifier:b,imageUrl:k,permissions:{readPermissionKey:S,defaultReadPermissionAmount:e,readPermissionType:t,postPermissionKey:D,postPermissionAmount:B,postPermissionType:M}});o({subStatus:`Creating ${b} chat...`});try{await l(u.errors||f.errors||new Map,u.provider,[...F,...I,...i.instructions],[...T,...R,...i.signers]),o({status:"success",subStatus:void 0})}catch(t){o({status:void 0,subStatus:void 0,error:t})}}}};export{f as wizardSubmit};
//# sourceMappingURL=wizardSubmit.js.map
